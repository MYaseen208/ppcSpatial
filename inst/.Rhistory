library(sjstats)
library(help=sjstats)
?sjstats
# load sample data
data(efc)
# fit linear model
fit <- aov(
c12hour ~ as.factor(e42dep) + as.factor(c172code) + c160age,
data = efc
)
eta_sq(fit)
omega_sq(fit)
eta_sq(fit, partial = TRUE)
anova_stats(car::Anova(fit, type = 2))
anova_stats(fit)
anova_stats(fit) %>% glimpse()
anova_stats(fit) %>% dplyr::glimpse()
anova_stats(fit) %>%  print(width = Inf)
anova_stats(fit)
anova_stats(fit) %>%  print(width = Inf)
192558/1770
5861/1770
1-0.0370
omega_sq
aov_stat
anova_stats
library(sjmisc)
library(help=sjmisc)
aov_stat_core
library(pwr)
?pwr
anova_stats(fit) %>%  print(width = Inf)
library(rgdal)
library(sf)
install.packages("sf")
library(spacetime)
library(sp)
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
library(svyrs)
library(srvyr)
methods("as_survey_design")
getAnywhere("as_survey_design.data.frame")
library(dplyr)
?ddplyr
?dplyr
?group_by
?mutate
library(dplyr)
?mutate
methods("mutate")
getAnywhere("mutate.default")
methods("compat_as_lazy_dots")
methods("group_by")
getAnywhere("group_by.data.frame")
library(srvyr)
methods("as_survey_design")
getAnywhere("as_survey_design.data.frame")
args("as_survey_design.data.frame")
args(as_survey_design.data.frame)
?as_survey_design.data.frame
args(as_survey_design.tbl_lazy)
args(as_survey_design.survey.design2)
args(srvyr:::as_survey_design.data.frame)
library(srvyr)
args(srvyr:::as_survey_design.data.frame)
cat(gsub(pattern=",", replacement="\n\t,", x=formatR:::usage(srvyr:::as_survey_design.data.frame)))
library(emmeans)
?emmeans
install.packages("emmeans")
install.packages("emmeans")
library(emmeans)
?emmeans
devtools::install_github("rvlenth/emmeans", build_vignettes = TRUE)
library(emmeans)
library(emmeans)
?emmeans
update.packages(ask = F)
install.packages("estimability")
library(estimability)
library(help=estimability)
setwd("/media/yaseen/Documents/MYaseen208/Consultancy_at_UAF/Mr._M._Yaseen/2017-09-14RPackages/stability/stability")
library(devtools)
install.packages("estimability")
library(estimability)
16.91*155
12*155
library(PakPC2017)
data(PakPop2017)
library(tidyverse)
PakPop2017 %>%
dplyr::filter(District == "FAISALABAD DISTRICT") %>%
dplyr::select(Tehsil) %>%
unique()
FSD <-
PakPop2017 %>%
dplyr::filter(District == "FAISALABAD DISTRICT")
View(FSD)
FSD
?PakPop2017
library(PakPC2017)
library(dplyr)
library(magrittr)
data("PakPop2017")
PakPop2017 %>%
group_by(Province, Division, District) %>%
summarise(Pop2017 = sum(Pop2017, na.rm = TRUE))
PakPop2017 %>%
filter(District == "FAISALABAD DISTRICT")
PakPop2017 %>%
dplyr::filter(District == "FAISALABAD DISTRICT")
PakPop2017 %>%
dplyr::filter(District == "FAISALABAD DISTRICT") %>%
print(width = Inf)
data(PakPC2017Pakistan)
PakPC2017Pakistan
data(PakPC2017Tehsil)
PakPC2017Tehsil
unique(PakPC2017Tehsil$Tehsil)
sort(unique(PakPC2017Tehsil$Tehsil))
PakPC2017Tehsil %>%
filter(Tehsil == "Sammundri")
library(ppcSpatial)
Launch_ppcSpatial()
library(PSLM2015)
data(PSLM2015)
library(help = PSLM2015)
?LiveStock
data(LiveStock)
LiveStock
PakPop2017 %>%
dplyr::filter(District == "FAISALABAD DISTRICT") %>%
dplyr::select(Tehsil)
library(ppcSpatial)
Launch_ppcSpatial()
library(PakPC2017)
data(PakPop2017)
library(tidyverse)
PakPop2017 %>%
dplyr::filter(District == "FAISALABAD DISTRICT") %>%
dplyr::select(Tehsil) %>%
unique()
PakPop2017 %>%
dplyr::filter(District == "FAISALABAD DISTRICT") %>%
dplyr::select(Tehsil)
PakPop2017
PakPop2017 %>% print(width = Inf)
PakPop2017 %>%
dplyr::filter(District == "FAISALABAD DISTRICT")
PakPop2017 %>%
dplyr::filter(District == "FAISALABAD DISTRICT") %>% print(width = Inf)
library(ppcSpatial)
Launch_ppcSpatial()
library(PunjabMICS2014)
library(PPMICS2014)
library(PMICS2014)
library(PakPMICS2014Ch)
library(help=PakPMICS2014Ch)
devtools::install_github("hadley/r4ds")
devtools::install_github("hadley/adv-r")
library(oldbookdown)
devtools::install_github("hadley/oldbookdown")
library(oldbookdown)
library(rmarkdown)
# Render chapters into tex  ----------------------------------------------------
needs_update <- function(src, dest) {
if (!file.exists(dest)) return(TRUE)
mtime <- file.info(src, dest)$mtime
mtime[2] < mtime[1]
}
render_chapter <- function(src) {
dest <- file.path("book/tex/", gsub("\\.rmd", "\\.tex", src))
if (!needs_update(src, dest)) return()
message("Rendering ", src)
command <- bquote(rmarkdown::render(.(src), oldbookdown::tex_chapter(),
output_dir = "book/tex", quiet = TRUE, envir = globalenv()))
writeLines(deparse(command), "run.r")
on.exit(unlink("run.r"))
source_clean("run.r")
}
source_clean <- function(path) {
r_path <- file.path(R.home("bin"), "R")
cmd <- paste0(shQuote(r_path), " --quiet --file=", shQuote(path))
out <- system(cmd, intern = TRUE)
status <- attr(out, "status")
if (is.null(status)) status <- 0
if (!identical(as.character(status), "0")) {
stop("Command failed (", status, ")", call. = FALSE)
}
}
chapters <- dir(".", pattern = "\\.rmd$")
lapply(chapters, render_chapter)
# Apply regular expressions to files -------------------------------------------
apply_regexp <- function(file, regexps) {
lines <- readLines(file)
for (i in seq_along(regexps)) {
lines <- gsub(escape(names(regexps)[i]), escape(regexps[[i]]), lines)
}
writeLines(lines, file)
}
apply_regexps <- function(regexps) {
files <- dir("book/tex/", "\\.tex$", full.names = TRUE)
lapply(files, apply_regexp, regexps = regexps)
}
escape <- function(x) {
x <- gsub("\\\\", "\\\\\\\\", x)
gsub("([{}])", "\\\\\\1", x)
}
apply_regexps(c(
"\\begin{SIDEBAR}" =    "\\begin{shortbox}\\Boxhead{",
"\\end{SIDEBAR}"   = "}",
"\\begin{ENDSIDEBAR}\\end{ENDSIDEBAR}" = "\\end{shortbox}"
))
# Copy across additional files -------------------------------------------------
file.copy("book/advanced-r.tex", "book/tex/", recursive = TRUE)
file.copy("book/krantz.cls", "book/tex/", recursive = TRUE)
file.copy(dir("book", "^K", full.names = TRUE), "book/tex/", recursive = TRUE)
file.copy("diagrams/", "book/tex/", recursive = TRUE)
file.copy("screenshots/", "book/tex/", recursive = TRUE)
file.copy("figures", "book/tex/", recursive = TRUE)
# Build tex file ---------------------------------------------------------------
# (build with Rstudio to find/diagnose errors)
old <- setwd("book/tex")
unlink("advanced-r.ind") # delete old index
system("xelatex -interaction=batchmode advanced-r ")
system("makeindex advanced-r")
system("xelatex -interaction=batchmode advanced-r ")
system("xelatex -interaction=batchmode advanced-r ")
setwd(old)
file.copy("book/tex/advanced-r.pdf", "book/advanced-r.pdf", overwrite = TRUE)
embedFonts("book/tex/advanced-r.pdf")
library(oldbookdown)
library(rmarkdown)
# Render chapters into tex  ----------------------------------------------------
needs_update <- function(src, dest) {
if (!file.exists(dest)) return(TRUE)
mtime <- file.info(src, dest)$mtime
mtime[2] < mtime[1]
}
render_chapter <- function(src) {
dest <- file.path("book/tex/", gsub("\\.rmd", "\\.tex", src))
if (!needs_update(src, dest)) return()
message("Rendering ", src)
command <- bquote(rmarkdown::render(.(src), oldbookdown::tex_chapter(),
output_dir = "book/tex", quiet = TRUE, envir = globalenv()))
writeLines(deparse(command), "run.r")
on.exit(unlink("run.r"))
source_clean("run.r")
}
source_clean <- function(path) {
r_path <- file.path(R.home("bin"), "R")
cmd <- paste0(shQuote(r_path), " --quiet --file=", shQuote(path))
out <- system(cmd, intern = TRUE)
status <- attr(out, "status")
if (is.null(status)) status <- 0
if (!identical(as.character(status), "0")) {
stop("Command failed (", status, ")", call. = FALSE)
}
}
chapters <- dir(".", pattern = "\\.rmd$")
lapply(chapters, render_chapter)
chapters
# Apply regular expressions to files -------------------------------------------
apply_regexp <- function(file, regexps) {
lines <- readLines(file)
for (i in seq_along(regexps)) {
lines <- gsub(escape(names(regexps)[i]), escape(regexps[[i]]), lines)
}
writeLines(lines, file)
}
apply_regexps <- function(regexps) {
files <- dir("book/tex/", "\\.tex$", full.names = TRUE)
lapply(files, apply_regexp, regexps = regexps)
}
library(oldbookdown)
library(rmarkdown)
# Render chapters into tex  ----------------------------------------------------
needs_update <- function(src, dest) {
if (!file.exists(dest)) return(TRUE)
mtime <- file.info(src, dest)$mtime
mtime[2] < mtime[1]
}
render_chapter <- function(src) {
dest <- file.path("book/tex/", gsub("\\.rmd", "\\.tex", src))
if (!needs_update(src, dest)) return()
message("Rendering ", src)
command <- bquote(rmarkdown::render(.(src), oldbookdown::tex_chapter(),
output_dir = "book/tex", quiet = TRUE, envir = globalenv()))
writeLines(deparse(command), "run.r")
on.exit(unlink("run.r"))
source_clean("run.r")
}
source_clean <- function(path) {
r_path <- file.path(R.home("bin"), "R")
cmd <- paste0(shQuote(r_path), " --quiet --file=", shQuote(path))
out <- system(cmd, intern = TRUE)
status <- attr(out, "status")
if (is.null(status)) status <- 0
if (!identical(as.character(status), "0")) {
stop("Command failed (", status, ")", call. = FALSE)
}
}
chapters <- dir(".", pattern = "\\.rmd$")
lapply(chapters, render_chapter)
# Apply regular expressions to files -------------------------------------------
apply_regexp <- function(file, regexps) {
lines <- readLines(file)
for (i in seq_along(regexps)) {
lines <- gsub(escape(names(regexps)[i]), escape(regexps[[i]]), lines)
}
writeLines(lines, file)
}
apply_regexps <- function(regexps) {
files <- dir("book/tex/", "\\.tex$", full.names = TRUE)
lapply(files, apply_regexp, regexps = regexps)
}
escape <- function(x) {
x <- gsub("\\\\", "\\\\\\\\", x)
gsub("([{}])", "\\\\\\1", x)
}
apply_regexps(c(
"\\begin{SIDEBAR}" =    "\\begin{shortbox}\\Boxhead{",
"\\end{SIDEBAR}"   = "}",
"\\begin{ENDSIDEBAR}\\end{ENDSIDEBAR}" = "\\end{shortbox}"
))
# Copy across additional files -------------------------------------------------
file.copy("book/advanced-r.tex", "book/tex/", recursive = TRUE)
file.copy("book/krantz.cls", "book/tex/", recursive = TRUE)
file.copy(dir("book", "^K", full.names = TRUE), "book/tex/", recursive = TRUE)
file.copy("diagrams/", "book/tex/", recursive = TRUE)
file.copy("screenshots/", "book/tex/", recursive = TRUE)
file.copy("figures", "book/tex/", recursive = TRUE)
# Build tex file ---------------------------------------------------------------
# (build with Rstudio to find/diagnose errors)
old <- setwd("book/tex")
# Build tex file ---------------------------------------------------------------
# (build with Rstudio to find/diagnose errors)
old <- setwd("~book/tex")
getwd()
install.packages("bookdown")
install.packages("bookdown")
library(PakPC2017)
?PakPop2017
library(agricolae)
# Index AMMI
data(plrv)
attach(plrv)
model <- AMMI(Locality, Genotype, Rep, Yield, console=FALSE)
detach(plrv)
Idx <- index.AMMI(model)
names(Idx)
Idx
# Crops with improved stability according AMMI.
print(Idx[order(Idx[,3]),])
PC2 <- model$biplot[ ,-c(1:2)]
A <- model$biplot[, 1:4]
A <- A[A[, 1] == "GEN", -c(1, 2)]
pc <- model$analysis[1, 4]/model$analysis[2, 4]
ASV <- apply(A, 1, function(x) sqrt(pc * (x[1])^2 + (x[2])^2))
rk <- rank(ASV)
B <- model$means
W <- tapply.stat(B[, 3], B[, 2], function(x) mean(x, rm.na = TRUE))
Rx <- rank(-W[, 2])
YSI <- rk + Rx
ranking <- data.frame(ASV, YSI, rASV = rk, rYSI = Rx, means = W[, 2])
View(ranking[order(ASV, -ranking$means),, drop=FALSE])
G.Means <-
with(
data=plrv
, expr=tapply(
X = Yield
, INDEX = Genotype
, FUN = mean
)
)
GE.Means <-
with(
data=plrv
, expr=tapply(
X = Yield
, INDEX = list(Genotype, Locality)
, FUN = mean
)
)
GGE.Effects <-
sweep(
x = GE.Means
, MARGIN = 2
, STATS = colMeans(GE.Means)
)
GE.Effects <-
sweep(
x = GGE.Effects
, MARGIN = 1
, STATS = rowMeans(GGE.Effects)
)
dimnames(GE.Effects) <- dimnames(GE.Means)
SVD <- svd(GE.Effects)
SVD
SVD$d
diag(SVD$d)
diag(diag(SVD$d))
library(matrixcalc)
diag(diag(SVD$d))
vec(diag(diag(SVD$d)))
vec(as.matrix(diag(diag(SVD$d))))
PC <- SVD$u %*% diag(sqrt(SVD$d))
L  <- SVD$d
m <- 3
PC
PC[ ,1:m] %*% diag(L[1:m]) %*% t(PC[ ,1:m])
diag(PC[ ,1:m] %*% diag(L[1:m]) %*% t(PC[ ,1:m]))
sqrt(diag(PC[ ,1:m] %*% diag(L[1:m]) %*% t(PC[ ,1:m])))
vec(sqrt(diag(PC[ ,1:m] %*% diag(L[1:m]) %*% t(PC[ ,1:m]))))
vec(as.matrix(sqrt(diag(PC[ ,1:m] %*% diag(L[1:m]) %*% t(PC[ ,1:m])))))
library(stability)
data("ge_data")
df1 <- ge_data
library(dplyr)
library(magrittr)
df2 <-
df1 %>%
dplyr::group_by(Gen, Env) %>%
dplyr::summarise(Mean = mean(Yield)) %>%
dplyr::ungroup() %>%
tidyr::spread(key = Env, value = Mean) %>%
#dplyr::select(-1) %>%
as.data.frame()
row.names(df2) <- levels(df1$Gen)
GE.Effs <-
df1 %>%
dplyr::group_by(Gen, Env) %>%
dplyr::summarise(GEMean = mean(Yield)) %>%
dplyr::group_by(Gen) %>%
dplyr::mutate(GMean = mean(GEMean)) %>%
dplyr::group_by(Env) %>%
dplyr::mutate(EMean = mean(GEMean)) %>%
dplyr::ungroup() %>%
dplyr::mutate(Mean = mean(GEMean)) %>%
dplyr::mutate(
GE.Effs = (GEMean - GMean - EMean + Mean)
, g       = length(unique(Gen))
, e       = length(unique(Env))
) %>%
dplyr::group_by(Env) %>%
dplyr::mutate(G.Ranks = dense_rank(desc(GE.Effs)))
g <- GE.Effs$g[1]
e <- GE.Effs$e[1]
GE.Effects <-
GE.Effs %>%
dplyr::select(Gen, Env, GE.Effs) %>%
tidyr::spread(key = Env, value = GE.Effs) %>%
dplyr::select(-Gen) %>%
as.matrix()
row.names(GE.Effects) <- levels(GE.Effs$Gen)
SVD <- svd(GE.Effects)
SVD
PC <- SVD$u %*% diag(sqrt(SVD$d))
PC
row.names(GE.Effects)
paste0("PC", 1:e)
dimnames(PC) <- dimnames(list(row.names(GE.Effects), paste0("PC", 1:e)))
PC
?dimnames
?matrix
dimnames(list(row.names(GE.Effects), paste0("PC", 1:e)))
row.names(GE.Effects)
paste0("PC", 1:e)
list(row.names(GE.Effects), paste0("PC", 1:e))
dimnames(list(row.names(GE.Effects), paste0("PC", 1:e)))
dimnames(PC) <- list(row.names(GE.Effects), paste0("PC", 1:e))
PC
library(matrixcalc)
L  <- SVD$d
m <- 3
vec(as.matrix(sqrt(diag(PC[ ,1:m] %*% diag(L[1:m]) %*% t(PC[ ,1:m])))))
m <- 2
vec(as.matrix(sqrt(diag(PC[ ,1:m] %*% diag(L[1:m]) %*% t(PC[ ,1:m])))))
ASD <-
tibble::as_tibble(
vec(as.matrix(sqrt(diag(PC[ ,1:m] %*% diag(L[1:m]) %*% t(PC[ ,1:m])))))
)
ASD
install.packages("DoE.base")
setwd("/media/yaseen/Documents/MYaseen208/Consultancy_at_UAF/Mr._M._Yaseen/2018-02-10/DoE.base/Documentation")
getwd()
setwd("/media/yaseen/Documents/MYaseen208/Consultancy_at_UAF/Mr._M._Yaseen/2018-02-10/DoE.base/Documentation")
library(rsconnect)
rsconnect::setAccountInfo(name='myaseen208', token='8058F7BFFDB1C65EB70880FF0B7757ED', secret='w5ESnJfq5/TlQXqcv8OINVHNb9I/+Rbzh2lMgdV/')
setwd("/media/yaseen/Documents/MYaseen208/Consultancy_at_UAF/Mr._M._Yaseen/2017-09-14RPackages/ppcSpatial/ppcSpatial/inst")
library(shiny)
runApp()
runApp('ppcSpatialShinyApp')
runApp('ppcSpatialShinyApp')
runApp('ppcSpatialShinyApp')
